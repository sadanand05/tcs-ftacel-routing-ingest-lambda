AWSTemplateFormatVersion: '2010-09-09'
Description: 'Provides Lambda execution roles for ingest and processing of external system data'

Parameters:

  StageName:
    Type: String
    AllowedValues:
      - dev
      - test
      - prod
    Description: 'The stage of deployment'

Resources:

  IngestLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${StageName}-ftacel-ingest-lambda-role'
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Action:
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Ref IngestLambdaCloudWatchPolicy
        - !Ref IngestLambdaS3Policy
        - !Ref IngestLambdaKMSPolicy
        - !Ref IngestLambdaSQSPolicy
        - !Ref IngestLambdaDynamoDBPolicy
        - !Ref IngestSecretsManagerPolicy

  IngestLambdaCloudWatchPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub '${StageName}-ftacel-ingest-lambda-cloudwatch-policy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: 'AllowLambdaToCreateLogStreamAndPut'
            Effect: Allow
            Action:
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*'
          - Sid: 'AllowLambdaToCreateLogGroups'
            Effect: Allow
            Action:
              - 'logs:CreateLogGroup'
            Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'

  IngestLambdaS3Policy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub '${StageName}-ftacel-ingest-lambda-s3-policy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: 'AllowReadFromIngestBucket'
            Effect: Allow
            Action:
              - 's3:GetObject'
              - 's3:ListBucket'
            Resource:
              - !Sub 'arn:aws:s3:::${StageName}-ftacel-ingest-${AWS::AccountId}'
              - !Sub 'arn:aws:s3:::${StageName}-ftacel-ingest-${AWS::AccountId}/*'

  IngestLambdaDynamoDBPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub '${StageName}-ftacel-ingest-lambda-dynamodb-policy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: 'AllowWriteToDynamoDBTable'
            Effect: Allow
            Action:
              - 'dynamodb:BatchWriteItem'
            Resource:
              - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${StageName}-ftacel-customers-ddb'

  IngestLambdaKMSPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub '${StageName}-ftacel-ingest-lambda-kms-policy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: 'AllowDecryptFromIngestBucket'
            Effect: Allow
            Action:
              - 'kms:Decrypt'
            Resource:
              Fn::ImportValue:
                !Sub '${StageName}-ftacel-ingest-s3-kms-arn'
          - Sid: 'AllowDecryptFromSecretsManager'
            Effect: Allow
            Action:
              - 'kms:Decrypt'
            Resource:
              Fn::ImportValue:
                !Sub '${StageName}-ftacel-ingest-gpg-kms-arn'
          - Sid: 'AllowEncryptToDynamoTable'
            Effect: Allow
            Action:
              - 'kms:Encrypt'
              - 'kms:Decrypt'
              - 'kms:ReEncrypt*'
              - 'kms:GenerateDataKey*'
              - 'kms:DescribeKey'
              - 'kms:CreateGrant'
            Resource:
              Fn::ImportValue:
                !Sub '${StageName}-ftacel-ingest-dynamo-kms-arn'

  IngestLambdaSQSPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub '${StageName}-ftacel-ingest-lambda-sqs-policy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: 'AllowSQSIngest'
            Effect: Allow
            Action:
              - 'sqs:ReceiveMessage'
              - 'sqs:DeleteMessage'
              - 'sqs:GetQueueAttributes'
            Resource: !Sub 'arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${StageName}-ftacel-ingest-queue'

  IngestSecretsManagerPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub '${StageName}-ftacel-ingest-lambda-secretsmanager-policy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: 'AllowSecretManagerRead'
            Effect: Allow
            Action:
              - 'secretsmanager:GetSecretValue'
            Resource:
              -
                Fn::ImportValue:
                  !Sub '${StageName}-ftacel-ingest-gpgkey-arn'
              -
                Fn::ImportValue:
                  !Sub '${StageName}-ftacel-ingest-gpgsecret-arn'

Outputs:

  IngestLambdaRoleArn:
    Description: 'The ARN of the ingest Lambda Role'
    Value: !GetAtt 'IngestLambdaRole.Arn'
    Export:
      Name: !Sub "${StageName}-ftacel-ingest-lambda-role-arn"
